//Δρούγκα Σοφία f3312105
//Αθανασίου Λυδία f3312102

pragma solidity >=0.7.0;

contract CryptoSOS {

    //players data, define player as data structure
     uint constant START_PRICE = 1 ether;    
     enum BoardSquareState {Empty, S, O}
     uint8 private constant EMPTY = 0;
     address  game_owner;  
     uint32 private counter; 
     uint32 gameID = 1;
     //mapping to games
     mapping (uint32 => Game) private games;  

     constructor()
    {
        game_owner = msg.sender;
              
    }

    struct Game {
   
		// player 1 plays first
		uint8  current_move;
		BoardSquareState[3][3] squareBoard;
		
		// Player 1
		gamePlayer  p1;
		// Player 2    
		gamePlayer  p2;     

		//player's turn
		uint8  active_player;    

		//game is in progress
		bool gameIsActive;
		//game has finished
		bool gameIsOver ;
		bool cancel_request;
		bool game_move;
		bool ur2slow_request ;
		bool gameIsRunning;
		uint start_time;
		uint game_duration;
		uint move;
		uint time_to_request_cancel;
		uint time_start_of_ur2slow;
		uint latest_move;
		uint8  reservedFunds;
		uint256 deposit;
		 bool collected;

    }

	//requested events
	 event StartGame(address,address, uint32);
	 event Move(address,uint8, uint8, uint32);
	 event Winner(address);

 
     struct gamePlayer   
    {
        uint256  gamePlayerId;     
        address  gamePlayerAddess;  
        bool  gamePlayerIsPresent; 
    }


	function play() public payable {

		 Game storage game = games[counter];    

		 //1 Ether required  to play
		 require (msg.value ==  START_PRICE);
		 require (!game.p1.gamePlayerIsPresent || !game.p2.gamePlayerIsPresent, "no one has in place yet");

		  if (games[gameID].p1.gamePlayerAddess == address(0x0)){
				games[gameID].p1.gamePlayerAddess = msg.sender;
				games[gameID].p1.gamePlayerIsPresent = true;
				games[gameID].start_time = block.timestamp;
				games[gameID].move = 1;
				games[gameID].gameIsOver = false;
				games[gameID].collected = false;
				emit StartGame(games[gameID].p1.gamePlayerAddess, address(0x0), gameID);
		  } else if (games[gameID].p2.gamePlayerAddess == address(0x0) && !games[gameID].gameIsOver ) {
				require(games[gameID].p1.gamePlayerAddess != msg.sender, "You ve been already registered as player 1");
				games[gameID].p2.gamePlayerAddess = msg.sender;
				games[gameID].p2.gamePlayerIsPresent = true;
				games[gameID].gameIsRunning =  true;
				games[gameID].deposit =  msg.value * 2 ether;
				games[gameID].game_move = false;
				emit StartGame(games[gameID].p1.gamePlayerAddess, games[gameID].p2.gamePlayerAddess,gameID);
				gameID = gameID + 1;
			}  else {
				// if last game was cancelled because no player2 entered, start a new game
				gameID = gameID + 1;
				games[gameID].p1.gamePlayerAddess = msg.sender;
				games[gameID].start_time = block.timestamp;
				games[gameID].move = 1;
				games[gameID].gameIsOver = false;
				games[gameID].collected = false;
				games[gameID].game_move = false;
				emit StartGame(games[gameID].p1.gamePlayerAddess, address(0x0), gameID);

			}
	}

	function reserve_a_game(address addr) internal view returns (uint32){
		   uint32 runningGameID = 1;
		   while (runningGameID <= gameID) {

			    if(games[runningGameID].p1.gamePlayerAddess == addr || games[runningGameID].p2.gamePlayerAddess == addr){
				   return runningGameID;
				}
			   runningGameID++;

		   }
		   return 0;
    }	

	function placeO(uint8 position) public{

		 uint32 myId = reserve_a_game(msg.sender);

		 uint8 xpos;
		 uint8 ypos;
		 require(myId != 0, "You are not in any game" );
		  require(games[myId].gameIsRunning, "Wait for player 2");
		 require(games[myId].p1.gamePlayerIsPresent && games[myId].p2.gamePlayerIsPresent, "The game must be active.");
		 require(!games[myId].gameIsOver, "Game has finished!");
		 require (msg.sender == games[myId].p1.gamePlayerAddess || msg.sender == games[myId].p2.gamePlayerAddess ); 
		 require(games[myId].squareBoard[xpos][ypos]== BoardSquareState.Empty, "square");
		 require(position>=1 && position<=9);
		 xpos = (position-1)/3;
		 ypos = (position-1)%3;

		 games[myId].squareBoard[xpos][ypos] =BoardSquareState.O;
		 games[myId].game_move = true;
		 emit Move(msg.sender, position, 2, gameID);
		 games[myId].move = games[myId].move+1;

		if (isWinner())  {
			games[myId].gameIsOver = true;
			//msg.sender.transfer(address(this).balance-0.2 ether);
			(bool success, ) = msg.sender.call{value: 1.9 ether}("");
			emit Winner(msg.sender);
		} else if( games[myId].move>9){
			games[myId].gameIsOver = true;
			emit Winner(address(0x0));
		}
	}

	function placeS(uint8 position) public{

		 uint32 myId = reserve_a_game(msg.sender);
		 require(myId != 0, "You are not in any game" );

		 uint8 xpos;
		 uint8 ypos;
		 require( games[myId].p1.gamePlayerIsPresent &&  games[myId].p2.gamePlayerIsPresent, "The game must be active.");
		 require(! games[myId].gameIsOver, "Game has finished!");
		 require (msg.sender ==  games[myId].p1.gamePlayerAddess || msg.sender ==  games[myId].p2.gamePlayerAddess ); 
		 require(position>=1 && position<=9);
		 xpos = (position-1)/3;
		 ypos = (position-1)%3;
		 require(games[myId].squareBoard[xpos][ypos]== BoardSquareState.Empty, "square");
		 games[myId].squareBoard[xpos][ypos] =  BoardSquareState.S;
		 games[myId].game_move = true;
		 emit Move(msg.sender, position, 2, gameID);
		 games[myId].move = games[myId].move+1;
     
		if (isWinner())  {
			games[myId].gameIsOver = true;
           (bool success, ) = msg.sender.call{value: 1.9 ether}("");
        }else if(games[myId].move>9){
            games[myId].gameIsOver = true;
            emit Winner(address(0x0));
        }
	}

	function   collectProfit() public payable   {
         require(msg.sender ==  game_owner, "You are not the owner of the contract");
         require(games[gameID].gameIsOver, "Game has not ended.");
         // msg.sender.transfer(address(this).balance);
         (bool success, ) = msg.sender.call{value: address(this).balance - games[gameID].reservedFunds*10**18}(""); //- reserve*10**18
     }

	function cancel() public payable {
        require(games[gameID].time_to_request_cancel - games[gameID].start_time> 120 seconds, "Not time yet to request cancel");
        require(!games[gameID].gameIsOver, "Game has alreadey completed.");
        require(games[gameID].p2. gamePlayerAddess == address(0x0), "Game has already started");
        require(address(this).balance >  games[gameID].reservedFunds*10**18, "Not enough funds.");
        games[gameID].gameIsOver = true;
        //msg.sender.transfer(address(this).balance);
       (bool success, ) = msg.sender.call{value: 1.8 ether}("");

    }

    function ur2slow()  public payable{
        games[gameID].time_start_of_ur2slow = block.timestamp;
        require(! games[gameID].gameIsOver, "Game has ended.");
        require( games[gameID].gameIsActive, "game is not active");
        //  require(msg.sender == opponentPlayer(getCurrentPlayer(move)), "it's your turn to play");
        require( games[gameID].game_move,"There is no player yet");
        require( games[gameID].time_start_of_ur2slow -  games[gameID].latest_move > 60 seconds,  "Not yet time to request slow");
        games[gameID].gameIsOver = true;
        // msg.sender.transfer(address(this).balance-0.1 ether);
        (bool success, ) = msg.sender.call{value: 1.8 ether}("");
        //(bool success, ) = msg.sender.call.ballance;
        emit Move(msg.sender,1,1, gameID);
    }

    function opponentPlayer(address current_player) internal view returns (address) {
        require( games[gameID].gameIsActive, "Wait for player 2");
        if (current_player == games[gameID].p1.gamePlayerAddess) {
            return  games[gameID].p2.gamePlayerAddess;
        } else if (current_player ==  games[gameID].p2.gamePlayerAddess) {
            return  games[gameID].p1.gamePlayerAddess;
        } else {
            revert("Invalid player.");
        }
    }

    // returns the current player
    function getCurrentPlayer(uint8 _current_move) internal view returns (address) {
       
        if (_current_move % 2 == 0) {
            return  games[gameID].p2.gamePlayerAddess;
        }
        else {
            return  games[gameID].p1.gamePlayerAddess;
        }
    }

	function isWinner() internal view returns (bool) {
       if ( games[gameID].squareBoard[0][0]  == BoardSquareState.S){
           if ((( games[gameID].squareBoard[0][1]  ==BoardSquareState.O ) && ( games[gameID].squareBoard[0][2]  == BoardSquareState.S )) || (( games[gameID].squareBoard[1][0]  == BoardSquareState.O ) && ( games[gameID].squareBoard[2][0]  == BoardSquareState.S ))){
               return true;
           }
        }
       if ( games[gameID].squareBoard[2][2]  ==  BoardSquareState.S){
           if ((( games[gameID].squareBoard[1][2]  == BoardSquareState.O ) && ( games[gameID].squareBoard[0][2]  == BoardSquareState.S ) ) || (( games[gameID].squareBoard[2][1]  == BoardSquareState.O ) && ( games[gameID].squareBoard[2][0]  == BoardSquareState.S )) ){
               return true;
           }
        }

       if  ( games[gameID].squareBoard[1][1]  ==  BoardSquareState.O){
           //Checks the diagonals
            // if  board[1][[1]] == SquareState.S  no possible winner diagonally
           if ((( games[gameID].squareBoard[0][0] ==  BoardSquareState.S) && ( games[gameID].squareBoard[2][2] ==  BoardSquareState.S )) || (( games[gameID].squareBoard[0][2] ==  BoardSquareState.S) && ( games[gameID].squareBoard[2][0] == BoardSquareState.S ))) {
               return true;
           }
           // checks the 2nd row and the second column of the board
           if ((( games[gameID].squareBoard[1][0]  == BoardSquareState.S)  && ( games[gameID].squareBoard[1][2]  == BoardSquareState.S)) || (( games[gameID].squareBoard[0][1]  == BoardSquareState.S)  && ( games[gameID].squareBoard[2][1]  == BoardSquareState.S))) {
               return true;
           }
       }
	}

    function positionToString(uint8 xpos, uint8 ypos)  internal returns (string memory) {
         
        if (games[gameID].squareBoard[xpos][ypos] == BoardSquareState.Empty) {
            return ("-");
        }
        if (games[gameID].squareBoard[xpos][ypos] == BoardSquareState.S) {
            return ("S");
        }
        if (games[gameID].squareBoard[xpos][ypos] ==BoardSquareState.O) {
            return ("O");
        }
    }

     function getGameState()  public    returns (string memory) {

        return (string(abi.encodePacked(positionToString(0,0), " | ", positionToString(0,1), " | ",positionToString(0,2), " | ",
        positionToString(1,0), "|" , positionToString(1,1),"|", positionToString(1,2),"|", positionToString(2,0),"|",
        positionToString(2,1),"|",positionToString(2,2) )));   

     }
 
}